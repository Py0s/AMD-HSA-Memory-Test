module &m:1:0:$full:$large:$default;

decl prog function &abort()();

group_u8 &x;
group_u8 &y;

group_u8 &w;
group_u8 &z;

prog kernel &__test_racing_mult_kernel(
	kernarg_u64 %in,
	kernarg_u64 %out)
{
@__test_racing_mult_kernel_entry:
	// BB#0:          -        		// %entry
	workitemabsid_u32		$s0, 0;		// get work item id
	cvt_s64_s32	$d0, $s0;					// convert 32 to 64


	ld_kernarg_align(8)_width(all)_u64	$d1, [%in];		// load address of in into d1
	add_u64	$d1, $d1, $d0;														// set d1 to in[id]
	ld_kernarg_align(8)_width(all)_u64	$d2, [%out];
	add_u64	$d2, $d2, $d0;


	cmp_eq_b1_u32				$c0, $s0, 0;	// compare if id equal zero
	cbr_b1							$c0, @ZERO;		// go to label if true

	cmp_eq_b1_u32				$c0, $s0, 1;
	cbr_b1							$c0, @ONE;

@END:
	ret;																	// Return if false

@ZERO:
	st_group_u8 1, [&x];			// x = 1
	ld_group_u8 $s0, [&y];		// r0 = y
	st_global_u8	$s0, [$d2];	// out[0] = y
	br @END;

@ONE:
	st_group_u8 2, [&y];			// y = 2
	ld_group_u8 $s0, [&x];		// r0 = x
	st_global_u8	$s0, [$d2]; // out[1] = x
	br @END;
};
