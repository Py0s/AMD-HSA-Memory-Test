
module &m:1:0:$full:$large:$default;

decl prog function &abort()();

group_b32 &rdy;
group_b32 &init1;
group_b32 &init2;

prog kernel &__test_thread_hang_kernel(
kernarg_u64 %in,
kernarg_u64 %out)
{
workitemabsid_u32		$s0, 0;						// get work item id
cvt_u64_u32	$d0, $s0;									// convert 32 to 64

ld_kernarg_align(8)_width(all)_u64	$d1, [%in];		// load addr in
ld_kernarg_align(8)_width(all)_u64	$d2, [%out];	// load address of out in d1

st_group_u32 0, [&rdy]; // init wait
st_group_u32 0, [&init1];
barrier_width(all);

cmp_eq_b1_u32				$c0, $s0, 0;			// compare if id equal zero
cbr_b1							$c0, @ZERO;				// go to label if true

cmp_eq_b1_u32				$c0, $s0, 1;			// compare if id equal one
cbr_b1							$c0, @ONE;				// go to label

@END:
ret;																	// Return if false

// THREAD 0
@ZERO: // LOOP TILL RDY 1
@LOOP:
atomic_ld_group_rlx_wg_b32 $s0, [&rdy];
cmp_eq_b1_u32 $c0, $s0, 0; // rdy == 0
cbr_b1 $c0, @LOOP;
br @END;


// THREAD 1: ACTIVATION THREAD
@ONE: // SET RDY TO 1
atomicnoret_st_group_rlx_wg_b32 [&rdy], 1;  // Activates worker threads screl
br @END;

};
