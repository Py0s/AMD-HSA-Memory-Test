module &n:1:0:$full:$large:$default;

decl prog function &abort()();

group_u32 &x;
group_u32 &y;

group_u32 &w;
group_u32 &z;

prog kernel &__test_racing_mult_2_kernel(
	kernarg_u64 %in,
	kernarg_u64 %out)
{
@__test_racing_mult_2_kernel_entry:
	st_group_u32 0, [&w]; // Initialize goup vars and wait
	st_group_u32 0, [&z];
	barrier;

	workitemabsid_u32		$s0, 0;		// get work item id
	cvt_s64_s32	$d0, $s0;					// convert 32 to 64
	mul_u64 $d0, $d0, 4;					// mult by sizeof int
	add_u64 $d0, $d0, 8;					// we don't override racing1

	ld_kernarg_align(8)_width(all)_u64	$d1, [%in];		// load address of in into d1
	add_u64	$d1, $d1, $d0;														// set d1 to in[id]
	ld_kernarg_align(8)_width(all)_u64	$d2, [%out];
	add_u64	$d2, $d2, $d0;


	cmp_eq_b1_u32				$c0, $s0, 0;	// compare if id equal zero
	cbr_b1							$c0, @ZERO;		// go to label if true

	cmp_eq_b1_u32				$c0, $s0, 1;
	cbr_b1							$c0, @ONE;

@END:
	ret;																	// Return if false

@ZERO:
	st_group_u32 3, [&w];			// w = 3
	ld_group_u32 $s0, [&z];		// r0 = z
	st_global_u32	$s0, [$d2];	// out[2] = z
	br @END;

@ONE:
	ld_group_u32 $s0, [&w];		// r0 = w
	st_group_u32 4, [&z];			// z = 4
	st_global_u32 $s0, [$d2];	// out[3] = w
	br @END;
};
